service: bgoperator

frameworkVersion: ">=1.0.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  stage: ${{opt:stage, 'prod'}}
  region: ${{opt:region, 'ap-southeast-1'}}
  memorySize: 256
  timeout: 30
  logRetentionInDays: 14
  environment:
    DEBUG: "op:*"
    ROUTE_53_HOSTED_ZONE_ID: "${{env:ROUTE_53_HOSTED_ZONE_ID}}"
    ROUTE_53_DOMAIN_NAME: "${{env:ROUTE_53_DOMAIN_NAME}}"
  apiKeys:
    - operator
  usagePlan:
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - Fn::GetAtt: BgStateTable.Arn
        - Fn::Sub: "${BgStateTable.Arn}/index/*"
    - Effect: Allow
      Action:
        - route53:*
      Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

plugins:
- serverless-webpack

functions:
  isDynamoEmpty:
    handler: src/handlers/is-dynamo-empty.handler
    events:
    - http:
        path: is-dynamo-empty
        method: get
        private: true
  getDockerTag:
    handler: src/handlers/get-docker-tag-assignment.handler
    events:
    - http:
        path: docker-tag-assignment
        method: post
        private: true
  flipDns:
    handler: src/handlers/flip-dns.handler
    events:
    - http:
        path: flip-dns
        method: post
        private: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    BgStateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "bgstate"
        AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
        KeySchema:
        - AttributeName: key
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
  Outputs:
    UsersTableArn:
      Description: The ARN for the BgStateTable
      Value:
        "Fn::GetAtt": [ BgStateTable, Arn ]
