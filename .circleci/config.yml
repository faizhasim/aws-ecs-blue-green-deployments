version: 2
jobs:
  build_app:
    working_directory: ~/app
    docker:
    - image: circleci/node:11
    steps:
    - checkout
    - setup_remote_docker
    - restore_cache:
        keys:
        - v1-{{ .Branch }}
        paths:
        - ~/caches/app.tar
    - run:
        name: Load Docker image layer cache
        command: |
          set +o pipefail
          docker load -i ~/caches/app.tar | true
    - run:
        name: Authenticate DockerHub
        command: |
          docker login -u ${DOCKERHUB_USERNAME} -p "${DOCKERHUB_PASSWORD}"
    - run:
        name: Build application Docker image
        command: docker build --cache-from=app -t app ./app/
    - run:
        name: Save Docker image layer cache
        command: |
          mkdir -p ~/caches
          docker save -o ~/caches/app.tar app
    - save_cache:
        key: v1-{{ .Branch }}-{{ epoch }}
        paths:
          - ~/caches/app.tar
    - deploy:
        name: Push application Docker image
        command: |
          export DOCKER_IMAGE=faizhasim/papaadamango
          docker tag app "${DOCKER_IMAGE}:${CIRCLE_SHA1}"
          docker tag app "${DOCKER_IMAGE}:latest"
          docker push "${DOCKER_IMAGE}:${CIRCLE_SHA1}"
          docker push "${DOCKER_IMAGE}:latest"

  deploy_serverless_operator:
    working_directory: ~/deploy
    docker:
    - image: circleci/node:11
    steps:
    - checkout
    - restore_cache:
        keys:
          - v1-dependencies-{{ checksum "serverless-operator/package.json" }}
    - run:
        name: yarn install
        command: |
          cd serverless-operator && yarn install
    - save_cache:
        paths:
        - node_modules
        key: v1-dependencies-{{ checksum "serverless-operator/package.json" }}
    - deploy:
        name: yarn sls deploy
        command: |
          cd serverless-operator && yarn run sls deploy

  deploy_single_ecs_cluster:
    working_directory: ~/deploy
    docker:
    - image: hashicorp/terraform:0.11.10
    steps:
    - checkout
    - run:
        name: terraform init
        command: cd terraform/single-ecs-cluster && terraform init -backend=true -force-copy -get=true -input=false
    - deploy:
        name: terraform apply
        command: cd terraform/single-ecs-cluster && terraform apply -auto-approve -var "docker_image_tag=${CIRCLE_SHA1}"

  deploy_blue_green_ecs_cluster:
    working_directory: ~/deploy
    docker:
    - image: hashicorp/terraform:0.11.10
    steps:
    - checkout
    - run:
        name: terraform init
        command: cd terraform/blue-green-ecs-cluster && terraform init -backend=true -force-copy -get=true -input=false
    - deploy:
        name: terraform apply for fresh infra
        command: |
          (curl -f -X GET -H "x-api-key: ${OPERATOR_API_KEY}" ${OPERATOR_BASE_URL}/is-dynamo-empty && \
            cd terraform/blue-green-ecs-cluster && \
            terraform apply -auto-approve -var "blue_docker_image_tag=${CIRCLE_SHA1}" -var "green_docker_image_tag=${CIRCLE_SHA1}" ) || echo 'Skipping terraform apply for existing infra'
    - deploy:
        name: terraform apply dockertag to standby infra
        command: |
          set +euo pipefail
          apk add --no-cache jq

          cd terraform/blue-green-ecs-cluster

          export blue_lb_dns_name=$(terraform output blue_lb_dns_name)
          export blue_lb_zone_id=$(terraform output blue_lb_zone_id)
          export green_lb_dns_name=$(terraform output green_lb_dns_name)
          export green_lb_zone_id=$(terraform output green_lb_zone_id)

          echo blue_lb_dns_name = ${blue_lb_dns_name}
          echo blue_lb_zone_id = ${blue_lb_zone_id}
          echo green_lb_dns_name = ${green_lb_dns_name}
          echo green_lb_zone_id = ${green_lb_zone_id}

          echo curl -X POST \
                   -H "x-api-key: ${OPERATOR_API_KEY}" \
                   --data "{\"loadbalancers\":[{\"dns\":\"${blue_lb_dns_name}\",\"zoneId\":\"${blue_lb_zone_id}\"},{\"dns\":\"${green_lb_dns_name}\",\"zoneId\":\"${green_lb_zone_id}\"}],\"newDockerTag\":\"${CIRCLE_SHA1}\"}" \
                   ${OPERATOR_BASE_URL}/docker-tag-assignment

          export DockerAssignmentJson=$(curl -X POST \
                                                           -H "x-api-key: ${OPERATOR_API_KEY}" \
                                                           --data "{\"loadbalancers\":[{\"dns\":\"${blue_lb_dns_name}\",\"zoneId\":\"${blue_lb_zone_id}\"},{\"dns\":\"${green_lb_dns_name}\",\"zoneId\":\"${green_lb_zone_id}\"}],\"newDockerTag\":\"${CIRCLE_SHA1}\"}" \
                                                           ${OPERATOR_BASE_URL}/docker-tag-assignment)

          echo DockerAssignmentJson: ${DockerAssignmentJson}
          export BlueDockerImageTag=$(echo $DockerAssignmentJson | jq ".[\"$blue_lb_dns_name\"]")
          export GreenDockerImageTag=$(echo $DockerAssignmentJson | jq ".[\"$green_lb_dns_name\"]")

          echo Applying changes
          terraform apply -auto-approve -var "blue_docker_image_tag=${BlueDockerImageTag}"  -var "green_docker_image_tag=${GreenDockerImageTag}"

  flip-dns:
    working_directory: ~/deploy
    docker:
      - image: hashicorp/terraform:0.11.10
    steps:
      - run:
          name: flip-dns
          command: |
            curl -f -X POST -H "x-api-key: ${OPERATOR_API_KEY}" ${OPERATOR_BASE_URL}/flip-dns

workflows:
  version: 2
  ci_only:
    jobs:
    - build_app:
        filters:
          branches:
            ignore:
              - master

  cd_blue_green:
    jobs:
    - build_app:
        filters:
          branches:
            only: master
    - deploy_serverless_operator:
        requires:
        - build_app
        filters:
          branches:
            only: master
    - deploy_single_ecs_cluster:
        requires:
        - build_app
        filters:
          branches:
            only: master
    - deploy_blue_green_ecs_cluster:
        requires:
          - build_app
        filters:
          branches:
            only: master
    - request-flip-dns:
        type: approval
        requires:
          - deploy_blue_green_ecs_cluster
    - flip-dns:
        requires:
          - request-flip-dns
